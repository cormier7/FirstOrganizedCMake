name: Generate Package

on:
  push:
  pull_request:
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCPACK_PACKAGE_VERSION:STRING=1.0-DCPACK_SYSTEM_NAME:STRING=linux-Release ..

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build . s-- -j2
      
    - name: Create package
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: cpack --build ${{env.BUILD_TYPE}} --target package
      
    - name: Upload
      uses : softprops/actions-gh-release@v1
      with : 
        files : ${{github.workspace}}/build/FirstOrganizedCmake-1.0-linux-Release.tar.gz
        env : GITHUB_TOKEN:${{secrets.GITHUB_TOKEN}}s
